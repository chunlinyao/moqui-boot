import org.ajoberstar.grgit.Grgit

/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'groovy'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
*/

defaultTasks 'build'

Node parseComponent(project) { new XmlParser().parse(project.file('component.xml')) }

buildscript {
    repositories { jcenter() }
    dependencies { classpath 'org.ajoberstar:gradle-git:1.7.2' }
}
// Not needed for explicit use, causes problems when not from git repo: plugins { id 'org.ajoberstar.grgit' version '1.3.2' }

task syncMyaddons {
        logger.lifecycle("coping myaddons.xml to moqui")
        copy { from file('myaddons.xml'); into file('moqui')}
 }

task gitPull {
    description "Do a git pull to update moqui, runtime, and each installed component (for each where a .git directory is found)"
    doLast {
        // framework and runtime
        if (file(".git").exists()) { logger.lifecycle("\nPulling moqui"); Grgit.open(dir: '.').pull() }
        if (file("moqui/.git").exists()) { logger.lifecycle("\nPulling moqui"); Grgit.open(dir: 'moqui/').pull() }
        if (file("moqui/runtime/.git").exists()) { logger.lifecycle("\nPulling runtime"); Grgit.open(dir: 'moqui/runtime').pull() }
        // all directories under runtime/component
        for (File compDir in file('moqui/runtime/component').listFiles().findAll { it.isDirectory() && it.listFiles().find { it.name == '.git' } }) {
            logger.lifecycle("\nPulling ${compDir.path}")
            Grgit.open(dir: compDir.path).pull()
        }
    }
}
//task getComponent {
//    dependsOn syncMyaddons
//}
//
//task getComponentSet {
//    dependsOn syncMyaddons
//}
